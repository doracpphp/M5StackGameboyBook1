#include "memory.h"
//メインメモリ 
static uint8_t memory[0x10000];
static uint8_t bootstrap[0x100] =
//0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D  0x0E  0x0F
{ 
    0x31, 0xFE, 0xFF, // LD SP,$FFFF
    0xAF,             // XOR A
    0x21, 0xFF, 0x9F, // LD
    0x32, 
    0xCB, 0x7C, 
    0x20, 0xFB,       // JR NZ
    0x21, 0x26, 0xFF, // LD HL,$FF26
    0x0E,0x11,        // LD C, $11
    0x3E, 0x80,       // LD A, $80
    0x32, 
    0xE2, 
    0x0C, 
    0x3E, 0xF3,       // LD A, $F3
    0xE2, 
    0x32, 
    0x3E, 0x77, 
    0x77, 
    0x3E, 0xFC,       // LD A, $FC
    0xE0, 0x47, 
    0x11, 0x04, 0x01, // LD DE, $0104
    0x21, 0x10, 0x80, // LD HL, $8010
    0x1A, 
    0xCD, 0x95, 0x00, // CALL $0095
    0xCD, 0x96, 0x00, // CALL $0096
    0x13,             // INC DE
    0x7B,             // LD A,E
    0xFE, 0x34,       // CP $34
    0x20, 0xF3,       // jR NZ, $F3
    0x11, 0xD8, 0x00, // LD DE, $0080
    0x06, 0x08,       // LD B, $08
    0x1A,             // LD A, (DE)
    0x13,             // INC DE
    0x22,             // LD (HL+), A
    0x23,             // INC HL
    0x05,             // DEC B
    0x20, 0xF9,       // JR NZ, $F9
    0x3E, 0x19,       // LD A, $19
    0xEA, 0x10, 0x99, // LD ($9910), A
    0x21, 0x2F, 0x99, // LD HL, $9992f
    0x0E, 0x0C,       // LD C, $0C
    0x3D,             // DEC A
    0x28, 0x08,       // 
    0x32, 0x0D, 0x20, //0x40
  0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,//0x50
  0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,//0x60
  0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,//0x70
  0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,//0x80
  0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,//0x90
  0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,//0xA0
  0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,//0xB0
  0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,//0xC0
  0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//0xD0
  0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
  0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50,
};

static uint8_t header[0x49] = {
    0x8C, 0xA9, 0x26, 0xA2, 0xF8, 0x8F, 0x92, 0x2B, 0xF0, 0x08, 0x70, 0x00, 0xF8, 0x88, 0x00, 0x11,
    0x88, 0x44, 0x34, 0x44, 0xD1, 0x11, 0x12, 0x48, 
    0x88, 0x88, 0x22, 0x22, 0x00, 0x0F, 0x88, 0x8B,
    0x71, 0x1E, 0x00, 0x00, 0x88, 0x88, 0x23, 0x44, 0x2E, 0x11, 0x44, 0x43, 0x11, 0x1D, 0x84, 0x21, 0x54,
};
//　メモリの初期化
void memory_init() {
    // BIOSの配置
    memcpy(memory, bootstrap, sizeof(bootstrap));
    for (int i = 0x104; i <= 0x133; i++) {
        memory[i] = header[i - 0x104];
    }
    // 各種レジスタの初期化
    memory[0xFF10] = 0x80;
    memory[0xFF11] = 0xBF;
    memory[0xFF12] = 0xF3;
    memory[0xFF14] = 0xBF;
    memory[0xFF16] = 0x3F;
    memory[0xFF19] = 0xBF;
    memory[0xFF1A] = 0x7F;
    memory[0xFF1B] = 0xFF;
    memory[0xFF1C] = 0x9F;
    memory[0xFF1E] = 0xBF;
    memory[0xFF20] = 0xFF;
    memory[0xFF23] = 0xBF;
    memory[0xFF24] = 0x77;
    memory[0xFF25] = 0xF3;
    memory[0xFF26] = 0xF1;
    memory[0xFF40] = 0x91;
    memory[0xFF47] = 0xFC;
    memory[0xFF48] = 0xFF;
    memory[0xFF49] = 0xFF;
}
// addrの示すアドレス番地の値を返す
uint8_t get_memory_value(uint16_t addr) {
    return memory[addr];
}
// addrの示すアドレス番地にvalueをセットする
void set_memory_value(uint16_t addr, uint8_t value) {
    if (addr == 0xFF44) {
        memory[addr] = 0;
    }
    else {
        memory[addr] = value;
    }
}
void set_lcd_memory(uint16_t addr, uint8_t value) {
    memory[addr] = value;
}
void set_memory_d16(uint16_t addr, uint16_t value) {
    memory[addr] = value & 0xFF;
    memory[addr + 1] = value >> 8;
}
uint16_t get_memory_d16(uint16_t addr) {
    return memory[addr] | (memory[addr + 1] << 8);
}

